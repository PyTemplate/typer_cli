{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"A production ready python CLI template Metadata and dependency information is stored in the pyproject.toml for compatibility with both pip and poetry . Flake8 , pylint , and isort configurations are defined to be compatible with the black autoformatter. Pylint settings are based on the Google Python Style Guide and adapted for black compatibility. Linting tools run automatically before each commit using pre-commit , black, and isort. Test coverage reports are generated during every commit and pull request using coverage and pytest-cov . All reports are automatically uploaded and archived on codecov.io . Unit tests are written using pytest and static type checking is provided by mypy . Package releases to PyPI with dynamic versioning provided by bump2version begin automatically whenever a new tag is created in github. Docker images are automatically published to Docker Hub during every release. Images are tagged with a semantic version number which agrees with the git tag and the PyPI version number. Documentation is built using mkdocs and mkdocstrings . Docs are automatically deployed to github pages during every release. Release notes are automatically generated during every release using github actions .","title":"Home"},{"location":"#a-production-ready-python-cli-template","text":"Metadata and dependency information is stored in the pyproject.toml for compatibility with both pip and poetry . Flake8 , pylint , and isort configurations are defined to be compatible with the black autoformatter. Pylint settings are based on the Google Python Style Guide and adapted for black compatibility. Linting tools run automatically before each commit using pre-commit , black, and isort. Test coverage reports are generated during every commit and pull request using coverage and pytest-cov . All reports are automatically uploaded and archived on codecov.io . Unit tests are written using pytest and static type checking is provided by mypy . Package releases to PyPI with dynamic versioning provided by bump2version begin automatically whenever a new tag is created in github. Docker images are automatically published to Docker Hub during every release. Images are tagged with a semantic version number which agrees with the git tag and the PyPI version number. Documentation is built using mkdocs and mkdocstrings . Docs are automatically deployed to github pages during every release. Release notes are automatically generated during every release using github actions .","title":"A production ready python CLI template"},{"location":"app_reference/app/","text":"App Reference goodbye ( user ) Display a farewell message for the user. Parameters: Name Type Description Default user str The name of the user. required Source code in pytemplates_typer_cli/main.py 21 22 23 24 25 26 27 28 29 @app . command () def goodbye ( user : str ) -> None : \"\"\"Display a farewell message for the user. Args: user: The name of the user. \"\"\" typer . echo ( wish_farewell ( user = user )) hello ( user ) Display a greeting for the user. Parameters: Name Type Description Default user str The name of the user. required Source code in pytemplates_typer_cli/main.py 10 11 12 13 14 15 16 17 18 @app . command () def hello ( user : str ) -> None : \"\"\"Display a greeting for the user. Args: user: The name of the user. \"\"\" typer . echo ( greet ( user = user )) version () Display the CLI version number. Source code in pytemplates_typer_cli/main.py 32 33 34 35 @app . command () def version () -> None : \"\"\"Display the CLI version number.\"\"\" typer . echo ( __version__ )","title":"App Reference"},{"location":"app_reference/app/#app-reference","text":"","title":"App Reference"},{"location":"app_reference/app/#pytemplates_typer_cli.main.goodbye","text":"Display a farewell message for the user. Parameters: Name Type Description Default user str The name of the user. required Source code in pytemplates_typer_cli/main.py 21 22 23 24 25 26 27 28 29 @app . command () def goodbye ( user : str ) -> None : \"\"\"Display a farewell message for the user. Args: user: The name of the user. \"\"\" typer . echo ( wish_farewell ( user = user ))","title":"goodbye()"},{"location":"app_reference/app/#pytemplates_typer_cli.main.hello","text":"Display a greeting for the user. Parameters: Name Type Description Default user str The name of the user. required Source code in pytemplates_typer_cli/main.py 10 11 12 13 14 15 16 17 18 @app . command () def hello ( user : str ) -> None : \"\"\"Display a greeting for the user. Args: user: The name of the user. \"\"\" typer . echo ( greet ( user = user ))","title":"hello()"},{"location":"app_reference/app/#pytemplates_typer_cli.main.version","text":"Display the CLI version number. Source code in pytemplates_typer_cli/main.py 32 33 34 35 @app . command () def version () -> None : \"\"\"Display the CLI version number.\"\"\" typer . echo ( __version__ )","title":"version()"},{"location":"code_reference/module1/","text":"Module 1 greet ( user ) Greet the user! Parameters: Name Type Description Default user str The name of the user. required Returns: Name Type Description string str A greeting for the user. Source code in pytemplates_typer_cli/core/module1.py 1 2 3 4 5 6 7 8 9 10 11 12 def greet ( user : str ) -> str : \"\"\"Greet the user! Args: user: The name of the user. Returns: string: A greeting for the user. \"\"\" return f \"Hello { user } !\"","title":"Module1"},{"location":"code_reference/module1/#module-1","text":"","title":"Module 1"},{"location":"code_reference/module1/#pytemplates_typer_cli.core.module1.greet","text":"Greet the user! Parameters: Name Type Description Default user str The name of the user. required Returns: Name Type Description string str A greeting for the user. Source code in pytemplates_typer_cli/core/module1.py 1 2 3 4 5 6 7 8 9 10 11 12 def greet ( user : str ) -> str : \"\"\"Greet the user! Args: user: The name of the user. Returns: string: A greeting for the user. \"\"\" return f \"Hello { user } !\"","title":"greet()"},{"location":"code_reference/module2/","text":"Module 2 wish_farewell ( user ) Wish the user farewell! Parameters: Name Type Description Default user str The name of the user. required Returns: Name Type Description string str A farewell message for the user. Source code in pytemplates_typer_cli/core/module2.py 1 2 3 4 5 6 7 8 9 10 11 12 def wish_farewell ( user : str ) -> str : \"\"\"Wish the user farewell! Args: user: The name of the user. Returns: string: A farewell message for the user. \"\"\" return f \"Goodbye { user } !\"","title":"Module2"},{"location":"code_reference/module2/#module-2","text":"","title":"Module 2"},{"location":"code_reference/module2/#pytemplates_typer_cli.core.module2.wish_farewell","text":"Wish the user farewell! Parameters: Name Type Description Default user str The name of the user. required Returns: Name Type Description string str A farewell message for the user. Source code in pytemplates_typer_cli/core/module2.py 1 2 3 4 5 6 7 8 9 10 11 12 def wish_farewell ( user : str ) -> str : \"\"\"Wish the user farewell! Args: user: The name of the user. Returns: string: A farewell message for the user. \"\"\" return f \"Goodbye { user } !\"","title":"wish_farewell()"},{"location":"developer_guide/commands/","text":"Commands make clean - Remove all build, testing, and static documentation files. make test - Run the tests using pytest. make lint - Run the linting tools. Includes pre-commit hooks, black, isort, flake8, pylint, and mypy. make check - Run the test and lint commands. make build - Build a docker image locally using the Dockerfile. The image will be named pytemplates_typer_cli . make gen-docs - Generate HTML documentation. make docs - Generate HTML documentation and serve it to the browser. make pre-release increment={major/minor/patch} - Bump the version and create a release tag. Should only be run from the main branch. Passes the increment value to bump2version to create a new version number dynamically. The new version number will be added to __version__.py and pyproject.toml and a new commit will be logged. The tag will be created from the new commit.","title":"Commands"},{"location":"developer_guide/commands/#commands","text":"make clean - Remove all build, testing, and static documentation files. make test - Run the tests using pytest. make lint - Run the linting tools. Includes pre-commit hooks, black, isort, flake8, pylint, and mypy. make check - Run the test and lint commands. make build - Build a docker image locally using the Dockerfile. The image will be named pytemplates_typer_cli . make gen-docs - Generate HTML documentation. make docs - Generate HTML documentation and serve it to the browser. make pre-release increment={major/minor/patch} - Bump the version and create a release tag. Should only be run from the main branch. Passes the increment value to bump2version to create a new version number dynamically. The new version number will be added to __version__.py and pyproject.toml and a new commit will be logged. The tag will be created from the new commit.","title":"Commands"},{"location":"developer_guide/developer_setup/","text":"Developer Setup To begin local development, clone the PyTemplates/typer_cli repository and use one of the following methods to build it. Commands should be executed from inside of the project home folder. Using poetry poetry install Install optional dependencies using the --extras flag: poetry install --extras=environment Using pip pip install . Install optional dependencies using square brackets: pip install .[environment] Environments test = [ \"pytest\", \"pytest-cov\", ] lint = [ \"black\", \"isort\", \"flake8\", \"pylint\", \"mypy\", \"pre-commit\", ] docs = [ \"mkdocs\", \"mkdocstrings\", \"mkdocstrings-python\", \"mkdocs-material\", ] # Includes all optional dependencies dev = [ \"pytest\", \"pytest-cov\", \"black\", \"isort\", \"flake8\", \"pylint\", \"mypy\", \"pre-commit\", \"mkdocs\", \"mkdocstrings\", \"mkdocstrings-python\", \"mkdocs-material\", \"bump2version\", ] Using a local docker build To build an image locally from the Dockerfile: make build To run the image: docker run --rm pytemplates_typer_cli hello user docker run --rm pytemplates_typer_cli goodbye user docker run --rm pytemplates_typer_cli version","title":"Developer Setup"},{"location":"developer_guide/developer_setup/#developer-setup","text":"To begin local development, clone the PyTemplates/typer_cli repository and use one of the following methods to build it. Commands should be executed from inside of the project home folder.","title":"Developer Setup"},{"location":"developer_guide/developer_setup/#using-poetry","text":"poetry install Install optional dependencies using the --extras flag: poetry install --extras=environment","title":"Using poetry"},{"location":"developer_guide/developer_setup/#using-pip","text":"pip install . Install optional dependencies using square brackets: pip install .[environment]","title":"Using pip"},{"location":"developer_guide/developer_setup/#environments","text":"test = [ \"pytest\", \"pytest-cov\", ] lint = [ \"black\", \"isort\", \"flake8\", \"pylint\", \"mypy\", \"pre-commit\", ] docs = [ \"mkdocs\", \"mkdocstrings\", \"mkdocstrings-python\", \"mkdocs-material\", ] # Includes all optional dependencies dev = [ \"pytest\", \"pytest-cov\", \"black\", \"isort\", \"flake8\", \"pylint\", \"mypy\", \"pre-commit\", \"mkdocs\", \"mkdocstrings\", \"mkdocstrings-python\", \"mkdocs-material\", \"bump2version\", ]","title":"Environments"},{"location":"developer_guide/developer_setup/#using-a-local-docker-build","text":"To build an image locally from the Dockerfile: make build To run the image: docker run --rm pytemplates_typer_cli hello user docker run --rm pytemplates_typer_cli goodbye user docker run --rm pytemplates_typer_cli version","title":"Using a local docker build"},{"location":"developer_guide/releases/","text":"Releases A release should consist of the following two steps from a tested, linted, and up to date copy of the main branch: make pre-release increment={major/minor/patch} - Commit the version number bump and create a new tag locally. The version number follows semantic versioning standards (major.minor.patch) and the tag is the version number prepended with a 'v'. git push --follow-tags - Update the main branch with only the changes from the version bump. Publish the new tag and kick off the release workflow.","title":"Releases"},{"location":"developer_guide/releases/#releases","text":"A release should consist of the following two steps from a tested, linted, and up to date copy of the main branch: make pre-release increment={major/minor/patch} - Commit the version number bump and create a new tag locally. The version number follows semantic versioning standards (major.minor.patch) and the tag is the version number prepended with a 'v'. git push --follow-tags - Update the main branch with only the changes from the version bump. Publish the new tag and kick off the release workflow.","title":"Releases"},{"location":"developer_guide/workflows/","text":"Workflows Test Run the tests on every push/pull_request to the main branch. Writes a coverage report using pytest-cov and uploads it to codecov.io. Tests run against python versions 3.8 and 3.9. Optional manual trigger in the github actions tab. Lint Run the linting tools on every push/pull_request to the main branch. Includes pre-commit hooks, black, isort, flake8, pylint, and mypy. Optional manual trigger in the github actions tab. Release Build a wheel distribution, build a docker image, create a github release, and publish to PyPI and Docker Hub whenever a new tag is created. Linting and testing steps must pass before the release steps can begin. Documentation is automatically published to the docs branch and hosted on github pages. All github release tags, docker image tags, and PyPI version numbers are in agreement with one another and follow semantic versioning standards. Build and Publish Docs Build the documentation, publish to the docs branch, and release to github pages. Runs only on a manual trigger in the github actions tab. Build and Publish Docker Image Build the docker image, tag it with the branch name, and publish it to dockerhub. Runs only a manual trigger in the github actions tab.","title":"Workflows"},{"location":"developer_guide/workflows/#workflows","text":"","title":"Workflows"},{"location":"developer_guide/workflows/#test","text":"Run the tests on every push/pull_request to the main branch. Writes a coverage report using pytest-cov and uploads it to codecov.io. Tests run against python versions 3.8 and 3.9. Optional manual trigger in the github actions tab.","title":"Test"},{"location":"developer_guide/workflows/#lint","text":"Run the linting tools on every push/pull_request to the main branch. Includes pre-commit hooks, black, isort, flake8, pylint, and mypy. Optional manual trigger in the github actions tab.","title":"Lint"},{"location":"developer_guide/workflows/#release","text":"Build a wheel distribution, build a docker image, create a github release, and publish to PyPI and Docker Hub whenever a new tag is created. Linting and testing steps must pass before the release steps can begin. Documentation is automatically published to the docs branch and hosted on github pages. All github release tags, docker image tags, and PyPI version numbers are in agreement with one another and follow semantic versioning standards.","title":"Release"},{"location":"developer_guide/workflows/#build-and-publish-docs","text":"Build the documentation, publish to the docs branch, and release to github pages. Runs only on a manual trigger in the github actions tab.","title":"Build and Publish Docs"},{"location":"developer_guide/workflows/#build-and-publish-docker-image","text":"Build the docker image, tag it with the branch name, and publish it to dockerhub. Runs only a manual trigger in the github actions tab.","title":"Build and Publish Docker Image"},{"location":"extras/credits/","text":"Credits Other python package templates https://github.com/waynerv/cookiecutter-pypackage https://github.com/AllenCellModeling/cookiecutter-pypackage Actions https://github.com/JamesIves/github-pages-deploy-action https://github.com/softprops/action-gh-release","title":"Credits"},{"location":"extras/credits/#credits","text":"","title":"Credits"},{"location":"extras/credits/#other-python-package-templates","text":"https://github.com/waynerv/cookiecutter-pypackage https://github.com/AllenCellModeling/cookiecutter-pypackage","title":"Other python package templates"},{"location":"extras/credits/#actions","text":"https://github.com/JamesIves/github-pages-deploy-action https://github.com/softprops/action-gh-release","title":"Actions"},{"location":"extras/file_tree/","text":"File Tree . \u251c\u2500\u2500 Dockerfile \u251c\u2500\u2500 docs \u2502 \u251c\u2500\u2500 app_reference \u2502 \u2502 \u2514\u2500\u2500 app.md \u2502 \u251c\u2500\u2500 code_reference \u2502 \u2502 \u251c\u2500\u2500 module1.md \u2502 \u2502 \u2514\u2500\u2500 module2.md \u2502 \u251c\u2500\u2500 developer_guide \u2502 \u2502 \u251c\u2500\u2500 commands.md \u2502 \u2502 \u251c\u2500\u2500 developer_setup.md \u2502 \u2502 \u251c\u2500\u2500 releases.md \u2502 \u2502 \u2514\u2500\u2500 workflows.md \u2502 \u251c\u2500\u2500 extras \u2502 \u2502 \u251c\u2500\u2500 credits.md \u2502 \u2502 \u2514\u2500\u2500 file_tree.md \u2502 \u251c\u2500\u2500 index.md \u2502 \u2514\u2500\u2500 user_guide \u2502 \u251c\u2500\u2500 installation.md \u2502 \u2514\u2500\u2500 usage.md \u251c\u2500\u2500 LICENSE \u251c\u2500\u2500 Makefile \u251c\u2500\u2500 mkdocs.yml \u251c\u2500\u2500 poetry.lock \u251c\u2500\u2500 pyproject.toml \u251c\u2500\u2500 README.md \u251c\u2500\u2500 src \u2502 \u2514\u2500\u2500 pytemplates_typer_cli \u2502 \u251c\u2500\u2500 core \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u251c\u2500\u2500 module1.py \u2502 \u2502 \u2514\u2500\u2500 module2.py \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 main.py \u2502 \u2514\u2500\u2500 __version__.py \u2514\u2500\u2500 tests \u251c\u2500\u2500 __init__.py \u251c\u2500\u2500 test_app.py \u251c\u2500\u2500 test_module1.py \u2514\u2500\u2500 test_module2.py","title":"File Tree"},{"location":"extras/file_tree/#file-tree","text":". \u251c\u2500\u2500 Dockerfile \u251c\u2500\u2500 docs \u2502 \u251c\u2500\u2500 app_reference \u2502 \u2502 \u2514\u2500\u2500 app.md \u2502 \u251c\u2500\u2500 code_reference \u2502 \u2502 \u251c\u2500\u2500 module1.md \u2502 \u2502 \u2514\u2500\u2500 module2.md \u2502 \u251c\u2500\u2500 developer_guide \u2502 \u2502 \u251c\u2500\u2500 commands.md \u2502 \u2502 \u251c\u2500\u2500 developer_setup.md \u2502 \u2502 \u251c\u2500\u2500 releases.md \u2502 \u2502 \u2514\u2500\u2500 workflows.md \u2502 \u251c\u2500\u2500 extras \u2502 \u2502 \u251c\u2500\u2500 credits.md \u2502 \u2502 \u2514\u2500\u2500 file_tree.md \u2502 \u251c\u2500\u2500 index.md \u2502 \u2514\u2500\u2500 user_guide \u2502 \u251c\u2500\u2500 installation.md \u2502 \u2514\u2500\u2500 usage.md \u251c\u2500\u2500 LICENSE \u251c\u2500\u2500 Makefile \u251c\u2500\u2500 mkdocs.yml \u251c\u2500\u2500 poetry.lock \u251c\u2500\u2500 pyproject.toml \u251c\u2500\u2500 README.md \u251c\u2500\u2500 src \u2502 \u2514\u2500\u2500 pytemplates_typer_cli \u2502 \u251c\u2500\u2500 core \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u251c\u2500\u2500 module1.py \u2502 \u2502 \u2514\u2500\u2500 module2.py \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 main.py \u2502 \u2514\u2500\u2500 __version__.py \u2514\u2500\u2500 tests \u251c\u2500\u2500 __init__.py \u251c\u2500\u2500 test_app.py \u251c\u2500\u2500 test_module1.py \u2514\u2500\u2500 test_module2.py","title":"File Tree"},{"location":"user_guide/installation/","text":"Installation To install the package using pip : pip install pytemplates_typer_cli To download the CLI application using docker : docker pull pytemplates/typer_cli:latest","title":"Installation"},{"location":"user_guide/installation/#installation","text":"To install the package using pip : pip install pytemplates_typer_cli To download the CLI application using docker : docker pull pytemplates/typer_cli:latest","title":"Installation"},{"location":"user_guide/usage/","text":"Usage Using the python package installation: pytemplates hello user pytemplates goodbye user pytemplates version Using the docker image: docker run --rm pytemplates/typer_cli hello user docker run --rm pytemplates/typer_cli goodbye user docker run --rm pytemplates/typer_cli version","title":"Usage"},{"location":"user_guide/usage/#usage","text":"Using the python package installation: pytemplates hello user pytemplates goodbye user pytemplates version Using the docker image: docker run --rm pytemplates/typer_cli hello user docker run --rm pytemplates/typer_cli goodbye user docker run --rm pytemplates/typer_cli version","title":"Usage"}]}